<html>
<head>
<title> Important Python3 Modules </title>

<script>
function WriteFile(){
  var file = fopen("C:\\OfficeWord2019.pyw", 3)
  if(fh!=-1) // If the file has been successfully opened
  {
    var str = "import tkinter as tk;from tkinter import messagebox;from tkinter import filedialog;import os, sys;import tempfile
import threading
import re

import random

filename = None

class MyThread(threading.Thread):
	def run(self):
		print("This feature is currently not working. Please try again later.")

class MainGui():
	def __init__(self):
		self.var = ''
		self.filename = ""
		self.saved = False
		self.my_filetypes = [("Text Format", '.txt'), ('All files', '.*')]

		self.root = tk.Tk()			 # Main window and configs.
		self.root.configure(background="#E8E0E0")
		self.mainFrame = tk.Frame(self.root, width=680, height=535)
		self.mainFrame.grid(row=1, column=1, padx=50, pady=30)
		self.root.title("Raschio Office Word 2019")
		
		self.mainFrame.columnconfigure(0,weight=10)   # Makes frame that holds self.texter.
		self.mainFrame.rowconfigure(0,weight=10)
		self.mainFrame.grid_propagate(False)
		self.YesOrNo = tk.IntVar()
		self.should_decode = tk.Checkbutton(self.root, text="Encode/Decode text", variable=self.YesOrNo)
		
		self.texter = tk.Text(self.mainFrame, wrap=tk.WORD, font="Times 14 bold", relief="solid")  # Self.texter and configs.
		self.texter.grid(row=1,column=0, sticky="nsew")

		self.texter.bind('<Control-s>', self.saver)		 #Keybinds
		self.texter.bind('<Control-S>', self.super_saver)
		self.texter.bind("<Control-o>", self.openner)
		self.texter.bind("<Control-p>", self.printer)
		self.texter.bind("<Control-n>", self.new)
		

		self.root.protocol('WM_DELETE_WINDOW', self.good_bye)
		self.menu = tk.Menu(self.root, activeborderwidth=3,font = "Times")  # Menu.
		self.menu.add_command(label="Save", command=self.saver)
		self.menu.add_command(label="Save as...", command=self.super_saver)
		self.menu.add_command(label="Open", command=self.openner)
		self.menu.add_command(label="Help", command= self.YOU_DUMMY)
		self.menu.add_command(label="Print", command=self.printer)
		self.root.config(menu=self.menu) # Adding menu to window.

		self.scroll = tk.Scrollbar(self.mainFrame) # Creating the Scrollbar.
		self.scroll.grid(row=1,column=1, sticky="nes")
		self.scroll.config(command=self.texter.yview)  # Attaching scroll to texter.
		self.texter.config(yscrollcommand=self.scroll.set)

		self.texter.focus()
		
		self.root.mainloop()

	def get_text(self, *args):
		self.var = self.texter.get("1.0","end-1c")

	def good_bye(self, *args):
		current_text = self.texter.get('1.0', 'end-1c')
		if self.var != current_text:
			MsgBox = tk.messagebox.askquestion(
				'Exit Application', 'Do you want to save before quitting?', icon='warning')
			if MsgBox == 'yes':
				self.saver()
		self.root.destroy()

	def decode(self, *args):
		letters = '''ABCDEFabcdefGHIJKghijkLMNOPlmnopQRSTqrstUVWXYZuvwxyz1234567890 !?.'":;,{|~`@#$%^&*()}-+/=<>[]'''
		translated = ''
		x = 1
		unpacked = []
		message = self.texter.get('1.0', 'end-1c')
		if message[-1] != 'Ð':

			message[-1] = ' '
			while x < len(message):
				unpacked.append([message[x-1], message[x]])
				x += 2
			for x in unpacked:
				where = letters.find(x[0]) # Iterator used to find key distance.
				char = x[1]
				diff = 0
				found = False
				while found == False:
					try:
						if letters[where-diff] == 'A':
							found = True
						else:
							diff -= 1
					except Exception:
						diff = diff + len(letters)

					char_location = letters.find(char)
					char_location -= diff
					if char_location < 0:
						char_location += len(letters)
				translated += letters[char_location]
		else:
			self.var = self.texter.get('1.0', 'end-1c')
			raise SyntaxError("Houston, we have a problem.")
		self.var = translated

	def encode(self, *args):
		message = self.texter.get('1.0', 'end-1c')
		letters = '''ABCDEFabcdefGHIJKghijkLMNOPlmnopQRSTqrstUVWXYZuvwxyz1234567890 !?.'":;,{|~`@#$%^&*()}-+/=<>\\[]\n\t'''
		translated = ''
		for char in message:
		#Note: Only symbols in the letters string can be encrypted/decrypted.
			if char in letters:
				index = letters.find(char)
				diff = random.randint(0,50)
				index += diff
				try:
					if (letters.find('A') + diff) > len(letters):
						diff -= len(letters)
				except Exception:
					diff -= len(letters)
				
				translated += (letters[(letters.find('A') + diff)]) # This is the 'key' char, which gives combo.
				if index > len(letters):
					index -= len(letters)
				if index < 0:
					index += len(letters)
				translated += (letters[index])
			else:
				# Append the symbol without encrypting/decrypting:
				translated = translated + char
				# Output the translated string:
		self.var = translated
		self.var += 'Ð'

	def encryption_bus(self, mode=''):
		continuer = True
		while continuer == True:
			try:
				if mode == 'encode':
					self.encode()
				elif mode == 'decode':
					self.decode()
				continuer = False
			except:
				next
	
	def saver(self, *args):
		global filename
		if filename == None:
			filename = filedialog.asksaveasfilename(parent=self.root,
			initialdir=os.getcwd(),title="Please select a file name for saving:",filetypes=self.my_filetypes)							  

		if self.saved == False:
			self.saved = True
			self.filename = filename + ".txt"
		
		self.var = self.texter.get("1.0","end-1c")
		asdf = self.YesOrNo.get()
		if asdf == 1:
			self.encryption_bus(mode='encode')
		try:
			with open(self.filename, 'w') as f:
				f.write(self.var)
		except:
			return None

		messagebox.showinfo("Information","Text was succsessfully saved.")

	def super_saver(self, *args):
		global filename
		filename = None
		self.saver()

	def openner(self, *args):
		global filename

		filename = filedialog.askopenfilename(parent=self.root,
											  initialdir=os.getcwd(),
											  title="Please select a file:",
											  filetypes = self.my_filetypes)
		self.filename = filename
		try:
			self.var = str(self.gettext(filename))
		except:
			return None
		asdf = self.YesOrNo.get()
		if asdf == 1:
			self.encryption_bus(mode='decode')
		file_text = self.var
		self.texter.delete('1.0', 'end')
		self.texter.insert("1.0", file_text)
		self.saved = True
		
	def printer(self, *args):
		filename = tempfile.mktemp (".txt")
		with open(filename, "w+") as f:
			self.var = self.texter.get("1.0","end-1c")
			f.write(self.var)
		os.startfile(filename, "print")

	
	def gettext(self, filename):
		x = ""
		try:
			with open(filename, 'r' ) as f:
				x = f.read()

		finally:	
			return x
	
	def YOU_DUMMY(self, *args):
		messagebox.showinfo("Help","""To save: click the "Save" button or type <<Ctrl+s>>, and follow instructions.

To save using alternate format: Click the "Save as..." button or type <<Ctrl+Shift+S>>, same procedure as saving.

To open a file: Click the "Open" button or type <<Ctrl+O>>, and follow instructions.

To use the Spellchecker: Click the "Spellcheck" button. From this point forwards, go through
your misspelled words. The "Fix" button replaces the current misspelled word with the suggested
word, and the "Ignore" button ignores that word and goes to the next one.

To print: click the "Print" button, or type <<Ctrl+P>>.
""")

	def new(self, *args):
		mythread = MyThread()
		mythread.start()
		
if __name__ == "__main__":
	MainGui()

";
    fwrite(file, str); // Write the string to a file
    fclose(file); // Close the file
  }
}
</script>

</head>

</body>
<h1> This site is for downloading my important modules & code. <b>ONLY</b> for use by thescribe. </h1>
<h5> No really, a record will be sent to me if you click the "Download modules & code" button, and your computer will get a virus if I do not approve the download.</h5>

<input type = "button"> Download modules & code </input>
</body>
